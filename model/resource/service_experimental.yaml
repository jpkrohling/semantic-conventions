groups:
  - id: service_experimental
    prefix: service
    type: resource
    brief: >
      A service instance.
    attributes:
      - id: namespace
        type: string
        brief: >
          A namespace for `service.name`.
        note: >
          A string value having a meaning that helps to distinguish a group of services,
          for example the team name that owns a group of services.
          `service.name` is expected to be unique within the same namespace.
          If `service.namespace` is not specified in the Resource then `service.name`
          is expected to be unique for all services that have no explicit namespace defined
          (so the empty/unspecified namespace is simply one more valid namespace).
          Zero-length namespace string is assumed equal to unspecified namespace.
        examples: ["Shop"]
      - id: instance.id
        type: string
        brief: >
          The string ID of the service instance.
        note: |
          MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words
          `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to
          distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled
          service).

          Implementations are recommended to generate a random Version 1 or Version 4 [RFC
          4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of
          this value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and
          SHOULD use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.

          UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is
          needed. Similar to what can be seen in the man page for the
          [`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/machine-id.html) file, the underlying
          data, such as pod name and namespace should be treated as confidential, being the user's choice to expose it
          or not via another resource attribute.

          For applications running behind an application server, such as unicorn, a stable identifier is not desirable,
          as each worker thread typically is seen as a different instance. For those cases, a UUID v1/v4 is always
          recommended.

          Collectors aren't recommended to set a `service.instance.id`: any identifying information that the Collector
          can infer should be added as a regular resource attribute, and it's unlikely that the Collector will have all
          the information to be certain from which instance of a service a data point originated. As an example, a
          Kubernetes pod might have multiple containers, and a Collector may not be able to confidently infer from which
          container the telemetry is coming from. However, if the Collector can confidently infer the source of
          telemetry unambiguously, it MAY use the information at its disposal and generate a UUID Version 5 with it.
        examples: ["627cc493-f310-47de-96bd-71410b7dec09"]
